/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */

#include <string.h>

#define BUF_SIZE 256
extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];

/* This macro is used to record code line */
#define CONCAT strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1)
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; printf(" ADD"); return(ADD); }
"-" 	{ CONCAT; printf(" SUB"); return(SUB); }
"*" 	{ CONCAT; printf(" MUL"); return(MUL); }
"/" 	{ CONCAT; printf(" DIV"); return(DIV); }
"%"     { CONCAT; printf(" MOD"); return(MOD); }
"++"    { CONCAT; printf(" INC"); return(INC); }
"--"    { CONCAT; printf(" DEC"); return(DEC); }

 /* Relational */
">"		{ CONCAT; printf(" MT"); return(MT); }
"<"		{ CONCAT; printf(" LT"); return(LT); }
">="	{ CONCAT; printf(" MTE"); return(MTE); }
"<="	{ CONCAT; printf(" LTE"); return(LTE); }
"=="	{ CONCAT; printf(" EQ"); return(EQ); }
"!="	{ CONCAT; printf(" NE"); return(NE); }

 /* Assignment */
"="		{ CONCAT; printf(" ASGN"); return(ASGN); }
"+="	{ CONCAT; printf(" ADDASGN"); return(ADDASGN); }
"-="	{ CONCAT; printf(" SUBASGN"); return(SUBASGN); }
"*="	{ CONCAT; printf(" MULASGN"); return(MULASGN); }
"/="	{ CONCAT; printf(" DIVASGN"); return(DIVASGN); }
"%="	{ CONCAT; printf(" MODASGN"); return(MODASGN); }

 /* Logical */
"&&"	{ CONCAT; printf(" AND"); return(AND); }
"||"	{ CONCAT; printf(" OR"); return(OR); }
"!"		{ CONCAT; printf(" NOT"); return(NOT); }

 /* Delimiters */
"("		{ CONCAT; printf(" LB"); return(LB); }
")"		{ CONCAT; printf(" RB"); return(RB); }
"{"		{ CONCAT; printf(" LCB"); return(LCB); }
"}"		{ CONCAT; printf(" RCB"); return(RCB); }
"["		{ CONCAT; printf(" LSB"); return(LSB); }
"]"		{ CONCAT; printf(" RSB"); return(RSB); }
","		{ CONCAT; printf(" COMMA"); return(COMMA); }

 /* Print Keywords */	
"print"		{ CONCAT; printf(" PRINT"); return(PRINT); }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; printf(" IF"); return(IF); }
"else"		{ CONCAT; printf(" ELSE"); return(ELSE); }
"while"		{ CONCAT; printf(" WHILE"); return(WHILE); }

 /* Declaration Keywords */
"void"		{ CONCAT; printf(" VOID"); return(VOID); }
"int"		{ CONCAT; printf(" INT"); return(INT); }
"float"  	{ CONCAT; printf(" FLOAT"); return(FLOAT); }
"string"  	{ CONCAT; printf(" STRING"); return(STRING); }
"bool"  	{ CONCAT; printf(" BOOL"); return(BOOL); }

 /* boolean Keywords */
"true"      { CONCAT; printf(" TRUE"); return(TRUE); }
"false"     { CONCAT; printf(" FALSE"); return(FALSE); }
"return"    { CONCAT; printf(" RETURN"); return(RETURN); }

 /* String Constant */
\"				        { BEGIN STRING_STATE; CONCAT; printf(" QUOTA"); return(QUOTA);}
<STRING_STATE>\"		{ BEGIN INITIAL; CONCAT; printf(" QUOTA"); return(QUOTA);}
<STRING_STATE>[^"]*		{ CONCAT; printf(" STR_CONST"); return(STR_CONST); }

 /* Number Constant */
{integer}	{ CONCAT; printf(" I_CONST"); return(I_CONST); }
{float}	    { CONCAT; printf(" F_CONST"); return(F_CONST); }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; CONCAT; }
<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{ CONCAT; printf("%d: %s \n", yylineno, buf); strcpy(buf,"");}
<COMMENT>"*"		{ CONCAT;  }
<COMMENT>"*/"		{  BEGIN INITIAL;CONCAT; }

 /* C++ type Comment */
\/\/.*	{ CONCAT; }

 /* Variable ID */
 {id}       { CONCAT; printf(" ID"); return(ID); }

 /* others */

[;]         { CONCAT; printf(" SEMICOLON"); return(SEMICOLON); }
[\n]        { CONCAT; printf("%d: %s", yylineno + 1, buf); strcpy(buf,""); }
[ \t]		{ CONCAT; } /* Ignore */
[^ \t\n] 	{ CONCAT; } /* Ignore other charactor sets */

%%

int yywrap()
{
    return 1;
}
