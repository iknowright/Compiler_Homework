/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */

#include <string.h>

#define BUF_SIZE 256
extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];

int dump_flag = 0;
int semantic_flag = 0;
extern void dump_symbol(int scope);
extern int scope;

extern void custom_yyerror(char *s);
extern char error_str[100];

/* This macro is used to record code line */
#define CONCAT strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1)
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return(ADD); printf(" "); }
"-" 	{ CONCAT; return(SUB); printf(" "); }
"*" 	{ CONCAT; return(MUL); printf(" "); }
"/" 	{ CONCAT; return(DIV); printf(" "); }
"%"     { CONCAT; return(MOD); printf(" "); }
"++"    { CONCAT; return(INC); printf(" "); }
"--"    { CONCAT; return(DEC); printf(" "); }

 /* Relational */
">"		{ CONCAT; return(MT); printf(" "); }
"<"		{ CONCAT; return(LT); printf(" "); }
">="	{ CONCAT; return(MTE); printf(" "); }
"<="	{ CONCAT; return(LTE); printf(" "); }
"=="	{ CONCAT; return(EQ); printf(" "); }
"!="	{ CONCAT; return(NE); printf(" "); }

 /* Assignment */
"="		{ CONCAT; return(ASGN); printf(" "); }
"+="	{ CONCAT; return(ADDASGN); printf(" "); }
"-="	{ CONCAT; return(SUBASGN); printf(" "); }
"*="	{ CONCAT; return(MULASGN); printf(" "); }
"/="	{ CONCAT; return(DIVASGN); printf(" "); }
"%="	{ CONCAT; return(MODASGN); printf(" "); }

 /* Logical */
"&&"	{ CONCAT; return(AND); printf(" "); }
"||"	{ CONCAT; return(OR); printf(" "); }
"!"		{ CONCAT; return(NOT); printf(" "); }

 /* Delimiters */
"("		{ CONCAT; return(LB); printf(" "); }
")"		{ CONCAT; return(RB); printf(" "); }
"{"		{ CONCAT; return(LCB); printf(" "); }
"}"		{ CONCAT; return(RCB); printf(" "); }
"["		{ CONCAT; return(LSB); printf(" "); }
"]"		{ CONCAT; return(RSB); printf(" "); }
","		{ CONCAT; return(COMMA); printf(" "); }

 /* Print Keywords */	
"print"		{ CONCAT; return(PRINT); printf(" "); printf(" "); }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return(IF); printf(" "); }
"else"		{ CONCAT; return(ELSE); printf(" "); }
"while"		{ CONCAT; return(WHILE); printf(" "); }

 /* Declaration Keywords */
"void"		{ CONCAT; return(VOID); printf(" "); }
"int"		{ CONCAT; return(INT); printf(" "); }
"float"  	{ CONCAT; return(FLOAT); printf(" "); }
"string"  	{ CONCAT; return(STRING); printf(" "); }
"bool"  	{ CONCAT; return(BOOL); printf(" "); }

 /* boolean Keywords */
"true"      { CONCAT; yylval.i_val = 1; return(TRUE); printf(" "); }
"false"     { CONCAT; yylval.i_val = 0; return(FALSE); printf(" "); }
"return"    { CONCAT; return(RETURN); printf(" "); }

 /* String Constant */
\"				        { BEGIN STRING_STATE; CONCAT; return(QUOTA); printf(" "); }
<STRING_STATE>\"		{ BEGIN INITIAL; CONCAT; return(QUOTA); printf(" "); }
<STRING_STATE>[^"]*		{ CONCAT; return(STR_CONST); printf(" "); }

 /* Number Constant */
{integer}	{ CONCAT; yylval.i_val = atoi(yytext); return(I_CONST); printf(" "); }
{float}	    { CONCAT; yylval.f_val = atof(yytext); return(F_CONST); printf(" "); }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; CONCAT; printf(" "); }
<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{ CONCAT; printf("%d: %s", yylineno, buf); strcpy(buf,""); printf(" "); }
<COMMENT>"*"		{ CONCAT;  }
<COMMENT>"*/"		{  BEGIN INITIAL;CONCAT; printf(" "); }

 /* C++ type Comment */
\/\/.*	{ CONCAT; }

 /* Variable ID */
 {id}       { CONCAT; yylval.string = strdup(yytext); return(ID); printf(" "); }

 /* others */

[;]         { CONCAT; return(SEMICOLON); printf(" "); }
[\n]        { 
                CONCAT;
                if(semantic_flag) {
                    custom_yyerror(error_str);
                }
                else {
                    if(strlen(buf) == 1) {
                        printf("%d:\n", yylineno);
                    } else {
                        printf("%d: %s", yylineno, buf);
                    }
                }
                semantic_flag = 0;
                strcpy(buf,"");
                if(dump_flag) {
                    dump_symbol(scope+1);
                    dump_flag = 0;
                }
            }
[ \t]		{ CONCAT; } /* Ignore */
[^ \t\n] 	{ CONCAT; } /* Ignore other charactor sets */

%%

int yywrap()
{
    return 1;
}
